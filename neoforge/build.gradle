
architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "neo"
    }
}

loom {
    neoForge {
        accessTransformer 'src/main/resources/META-INF/accesstransformer.cfg'
    }

    mods {
        // force this mod onto the classpath since for some reason arch misses it
        forge {
            sourceSet sourceSets.main
        }
    }
}

configurations {
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url 'https://maven.neoforged.net/releases/' }
    maven { url 'https://cursemaven.com' }
}

dependencies {
    shadowCommon(project(path: ':common', configuration: 'transformProductionNeoForge'))
    common(project(path: ':common', configuration: 'namedElements'))

    neoForge "net.neoforged:neoforge:$neo_version"
    modImplementation group: 'curse.maven', name: 'configured-457570', version: configured_maven_version_neo
    modImplementation("com.personthecat:catlib-neoforge:$catlib_version") {
        exclude group: 'org.jetbrains', module: 'annotations'
    }
}

processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set 'dev'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
