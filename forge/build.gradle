
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {}
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    shadowCommon(project(path: ':common', configuration: 'transformProductionForge')) {
        transitive = false
    }
    common(project(path: ':common', configuration: 'namedElements')) {
        transitive = false
    }
    forge "net.minecraftforge:forge:$mc_version-$forge_version"
    modApi("com.personthecat:catlib-forge:$catlib_version") {
        exclude group: 'org.jetbrains', module: 'annotations'
    }
}

processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": mod_vendor,
            "Specification-Version": mod_version,
            "Implementation-Title": mod_id,
            "Implementation-Version": mod_version,
            "Implementation-Vendor": mod_vendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
